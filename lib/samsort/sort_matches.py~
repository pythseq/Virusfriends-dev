import argparse
import sys
import pysam

class Sorter:
    def __init__(self):
        self.MIN_MATCHED_BASES = 50
        self.WEAK_MATCH_THRESHOLD=0.8
        self.STRONG_MATCH_THRESHOLD=0.7
        
    def sort_matches(samfile, outdir, MIN_MATCHED_BASES = 50, WEAK_MATCH_THRESHOLD=0.8, STRONG_MATCH_THRESHOLD=0.7, log=True):

        if not outdir.endswith('/'):
            outdir = outdir + '/'

        new_name = samfile.split('.')[0].split('/')[-1]

        if samfile.endswith('.sam'):
            readtype = 'r'
        elif samfile.endswith('.bam'):
            readtype = 'rb'
        else:
            sys.stderr.write('samfile {} does not end with .sam or .bam, trying as samfile...\n'.format(samfile))
            readtype = 'r'
        try:
            samfile = pysam.AlignmentFile(samfile, readtype)
        except Exception as e:
            sys.stderr.write(
            'samfile {} could not be opened by pysam, check that it is a BAM/SAM file. Error:\n{}\n'.format(samfile, e))
            sys.exit(1)

        strong_reads = []
        weak_reads = []
        for read in samfile.fetch():
            x, y = read.get_cigar_stats()
            matched_bases = x[0]
            if matched_bases < MIN_MATCHED_BASES:
                #if log:
                #print('low match length: {}\n'.format(read.reference_name))
                continue
            total_bases = int(sum(x))
            percent_match = (matched_bases / float(total_bases))
            #print(percent_match)
            if percent_match <= WEAK_MATCH_THRESHOLD:
                #if log:
                #    print('weak match: {}\n'.format(read.reference_name))
                weak_reads.append(read)
            if percent_match >= STRONG_MATCH_THRESHOLD:
                #if log:
                #print('strong match: {}\n'.format(read.reference_name))
                strong_reads.append(read)

        #write strong reads to new file:
        with open(outdir + 'strong_' + new_name + '.fasta', 'w') as outfile:
            for read in strong_reads:
                refname = read.query_name
                dna = read.get_reference_sequence()
                outfile.write('>{}\n{}\n'.format(refname, dna))

        #write fasta file
        with open(outdir + 'weak_' + new_name + '.fasta', 'w') as outfile:
            for read in weak_reads:
                refname = read.query_name
                dna = read.get_reference_sequence()
                outfile.write('>{}\n{}\n'.format(refname, dna))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Reads a SAM or BAM file and appends a CSV file with information about the matched reads')
    parser.add_argument('-i', '--input', help='Name of the input .sam file to be read', required=True)
    parser.add_argument('-o', '--output', help='Name of the directory to write weakly mached reads (fasta) and strong matches (samfile)', required=True)
    parser.add_argument('-l', '--length', help='Ignore all matches shorter than -l base pairs, default is 50', type=int)
    parser.add_argument('-w', '--weak_match_threshold', help='Consider matches LESS than this % to be weak (and output to fasta); default .8', type=int)
    parser.add_argument('-s', '--strong_match_threshold', help='Consider matches GREATER than this % to be strong (and output to a new samfile); default .7', type=int)
    parser.add_argument('-v', '--verbose', help='Output a log file of the initial input stats. NOT WORKING', action='store_true')

    try:
        args = parser.parse_args()
    except:
        parser.print_help()
        sys.exit(1)

    if not args.length:
        args.length = 50

    if not args.weak_match_threshold:
        args.weak_match_threshold = .8
    elif args.weak_match_threshold > 1:
        args.weak_match_threshold = args.weak_match_threshold/100

    if not args.strong_match_threshold:
        args.strong_match_threshold = .7
    elif args.strong_match_threshold > 1:
        args.strong_match_threshold = args.strong_match_threshold/100

    sort_matches(args.input, args.output, args.length, args.weak_match_threshold, args.strong_match_threshold, args.verbose)
    sys.exit(0)
